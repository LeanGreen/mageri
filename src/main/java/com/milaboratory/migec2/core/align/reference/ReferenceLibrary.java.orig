/*
 * Copyright 2014 Mikhail Shugay (mikhail.shugay@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.milaboratory.migec2.core.align.reference;

import com.milaboratory.core.sequence.nucleotide.NucleotideSequence;
import com.milaboratory.core.sequencing.io.fasta.FastaReader;
import com.milaboratory.core.sequencing.read.SSequencingRead;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class ReferenceLibrary {
    // todo get by name, type, etc
    // todo clone for aligner with hypervariable regions
    private final List<Reference> references = new ArrayList<Reference>();
    private final List<Reference> deNovoReferences = new ArrayList<Reference>();

    public ReferenceLibrary(File referenceFile) throws FileNotFoundException {
        try {
            FastaReader reader = new FastaReader(referenceFile);
            SSequencingRead record;
            Set<NucleotideSequence> referenceSequences = new HashSet<NucleotideSequence>();
            while ((record = reader.take()) != null) {
                NucleotideSequence sequence = record.getData().getSequence();
                String[] descriptionFields = record.getDescription().split("[ \t]");
                references.add(new Reference(descriptionFields[0], descriptionFields[1],
                        sequence, false));
                references.add(new Reference(descriptionFields[0], descriptionFields[1],
                        sequence.getReverseComplement(), true));
                if (referenceSequences.contains(sequence))
                    throw new IllegalArgumentException("Duplicate sequences not allowed in reference library.");
                referenceSequences.add(sequence);
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public List<Reference> getReferences() {
        return references;
    }

    public List<Reference> getDeNovoReferences() {
        return deNovoReferences;
    }
}
